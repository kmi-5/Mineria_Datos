import pandas as pd
from utiles.manejadores_archivos import guardar_tabla_individual  
from utiles.utilidades_logs import registrar_cambio

"""
utiles es el m√≥dulo del proyecto con herramientas auxiliares.
    manejadores_archivos.py maneja archivos (ene este caso, guardar tablas).
    utilidades_logs.py registra cambios realizados.
        Las funciones guardar_tabla_individual y registrar_cambio son del proyecto, no de Python ni librer√≠as externas.
"""

def menu_interactivo(df_original, nombre):
    """Permite al usuario aplicar transformaciones de forma interactiva."""
    df = df_original.copy()
    cambios = []
    print(f"\nüß© Modificando tabla: {nombre}")
    print(f"Columnas disponibles: {list(df.columns)}")
    print(f"Filas actuales: {len(df)}")

    while True:
        print("\nOpciones disponibles:")
        print("1Ô∏è‚É£ Ver las primeras filas")
        print("2Ô∏è‚É£ Agregar una nueva columna calculada")
        print("3Ô∏è‚É£ Modificar una columna existente")
        print("4Ô∏è‚É£ Eliminar una columna")
        print("5Ô∏è‚É£ Agregar un nuevo registro/fila")
        print("6Ô∏è‚É£ Eliminar un registro/fila")  # NUEVA OPCI√ìN
        print("7Ô∏è‚É£ Finalizar y guardar cambios")
        print("8Ô∏è‚É£ Volver sin guardar cambios")
        print("9Ô∏è‚É£ Salir del programa")

        opcion = input("Seleccion√° una opci√≥n (1-9): ").strip()

        if opcion == "1":
            print(f"\nüìä Primeras 5 filas de '{nombre}':")
            print(df.head())
            print(f"... Total de filas: {len(df)}")

        elif opcion == "2":
            nueva_col = input("Nombre de la nueva columna: ")
            expresion = input("Ingres√° una expresi√≥n (ej: df['precio'] * 1.21): ")
            try:
                df[nueva_col] = eval(expresion)
                cambios.append(f"Agregada columna '{nueva_col}' con: {expresion}")
                print(f"‚úÖ Columna '{nueva_col}' creada.")
            except Exception as e:
                print(f"‚ùå Error: {e}")

        elif opcion == "3":
            col = input("Nombre de la columna a modificar: ")
            if col in df.columns:
                expresion = input(f"Expresi√≥n para modificar '{col}' (ej: df['{col}'] * 2): ")
                try:
                    df[col] = eval(expresion)
                    cambios.append(f"Modificada columna '{col}' con: {expresion}")
                    print(f"‚úÖ Columna '{col}' modificada.")
                except Exception as e:
                    print(f"‚ùå Error: {e}")
            else:
                print("‚ùå Columna no encontrada.")

        elif opcion == "4":
            col = input("Nombre de la columna a eliminar: ")
            if col in df.columns:
                df.drop(columns=[col], inplace=True)
                cambios.append(f"Eliminada columna '{col}'")
                print(f"‚úÖ Columna '{col}' eliminada.")
            else:
                print("‚ùå Columna no encontrada.")

        elif opcion == "5":
            print("üì• Agregando nuevo registro:")
            nueva_fila = {}
            for col in df.columns:
                valor = input(f"Valor para '{col}': ")
                nueva_fila[col] = valor
            
            # Convertir a tipos de datos apropiados
            for col, valor in nueva_fila.items():
                try:
                    if df[col].dtype == 'int64':
                        nueva_fila[col] = int(valor)
                    elif df[col].dtype == 'float64':
                        nueva_fila[col] = float(valor)
                except:
                    pass  # Mantener como string si no se puede convertir
            
            df = pd.concat([df, pd.DataFrame([nueva_fila])], ignore_index=True)
            cambios.append(f"Agregado registro: {nueva_fila}")
            print("‚úÖ Registro agregado.")

        elif opcion == "6":  
            print("üóëÔ∏è Eliminar registro/fila")
            print(f"üìä Tabla actual tiene {len(df)} filas")
            
            # Mostrar filas con √≠ndices
            print("\nüìã Filas disponibles (primeras 10):")
            print(df.head(10).to_string())
            
            try:
                indice = int(input(f"\nIngres√° el n√∫mero de √≠ndice de la fila a eliminar (0-{len(df)-1}): "))
                
                if 0 <= indice < len(df):
                    # Mostrar qu√© se va a eliminar
                    fila_a_eliminar = df.iloc[indice]
                    print(f"\n‚ö†Ô∏è  Se eliminar√° esta fila:")
                    print(fila_a_eliminar.to_string())
                    
                    confirmar = input("\n¬øConfirmar eliminaci√≥n? (si/no): ").lower().strip()
                    
                    if confirmar == "si":
                        df = df.drop(indice).reset_index(drop=True)
                        cambios.append(f"Eliminada fila con √≠ndice {indice}: {fila_a_eliminar.to_dict()}")
                        print("‚úÖ Fila eliminada correctamente.")
                    else:
                        print("‚ùå Eliminaci√≥n cancelada.")
                else:
                    print(f"‚ùå √çndice fuera de rango. Debe estar entre 0 y {len(df)-1}")
                    
            except ValueError:
                print("‚ùå Error: Debes ingresar un n√∫mero v√°lido.")
            except Exception as e:
                print(f"‚ùå Error inesperado: {e}")

        elif opcion == "7":  # Antes era "6" - finalizar y guardar
            break

        elif opcion == "8":  # Antes era "7" - volver sin guardar
            print("üîô Descartando cambios y volviendo al men√∫...")
            return None, [], True

        elif opcion == "9":  # Antes era "8" - salir del programa
            print("üëã Saliendo del programa...")
            exit()
        else:
            print("‚ùå Opci√≥n inv√°lida.")

    # mostrar cambios
    if cambios:
        print(f"\nüìã RESUMEN de cambios en '{nombre}':")
        for i, cambio in enumerate(cambios, 1):
            print(f"   {i}. {cambio}")
        
        confirmar = input("\n¬øAplicar estos cambios? (si/no): ").lower().strip()
        if confirmar == "si":
            # guardar en auxiliar
            guardar_tabla_individual(df, nombre)
            registrar_cambio(nombre, cambios)
            print("‚úÖ Cambios guardados en archivo auxiliar.")
            return df, cambios, False
        else:
            print("‚ùå Cambios descartados.")
            return None, [], True
    else:
        print("‚ÑπÔ∏è No se realizaron cambios.")
        return None, [], True